{"ast":null,"code":"import { v4 as uuidv4 } from 'uuid';\n// In-memory storage for demo purposes\n// In a real app, this would be replaced with a database\nlet users = [];\n\n// Check if we're in a browser environment\nconst isBrowser = typeof window !== 'undefined';\n\n// Get storage key with a prefix to avoid conflicts\nconst getStorageKey = key => {\n  return `personal-budget-tracker-${key}`;\n};\n\n// Initialize users from localStorage if available\nif (isBrowser) {\n  const savedUsers = localStorage.getItem(getStorageKey('users'));\n  if (savedUsers) {\n    try {\n      users = JSON.parse(savedUsers);\n    } catch (e) {\n      console.error('Failed to parse saved users:', e);\n    }\n  }\n}\n\n// Save users to localStorage\nconst saveUsers = () => {\n  if (isBrowser) {\n    localStorage.setItem(getStorageKey('users'), JSON.stringify(users));\n  }\n};\nexport const authService = {\n  // Register a new user\n  register: (username, email, password) => {\n    return new Promise((resolve, reject) => {\n      // Check if user already exists\n      if (users.some(user => user.email === email)) {\n        reject(new Error('User with this email already exists'));\n        return;\n      }\n\n      // Create new user\n      const newUser = {\n        id: uuidv4(),\n        username,\n        email,\n        createdAt: new Date()\n      };\n\n      // Add to users array\n      users.push(newUser);\n      saveUsers();\n\n      // Store user in session storage for current session\n      if (isBrowser) {\n        sessionStorage.setItem(getStorageKey('currentUser'), JSON.stringify(newUser));\n      }\n      resolve(newUser);\n    });\n  },\n  // Login a user\n  login: (email, password) => {\n    return new Promise((resolve, reject) => {\n      // Find user by email\n      const user = users.find(u => u.email === email);\n      if (!user) {\n        reject(new Error('User not found'));\n        return;\n      }\n\n      // In a real app, we would verify the password here\n      // For this demo, we'll just check if the user exists\n\n      // Store user in session storage for current session\n      if (isBrowser) {\n        sessionStorage.setItem(getStorageKey('currentUser'), JSON.stringify(user));\n      }\n      resolve(user);\n    });\n  },\n  // Logout the current user\n  logout: () => {\n    return new Promise(resolve => {\n      if (isBrowser) {\n        sessionStorage.removeItem(getStorageKey('currentUser'));\n      }\n      resolve();\n    });\n  },\n  // Get the current user\n  getCurrentUser: () => {\n    if (!isBrowser) return null;\n    const userJson = sessionStorage.getItem(getStorageKey('currentUser'));\n    if (!userJson) return null;\n    try {\n      return JSON.parse(userJson);\n    } catch (e) {\n      console.error('Failed to parse current user:', e);\n      return null;\n    }\n  },\n  // Check if user is authenticated\n  isAuthenticated: () => {\n    return !!authService.getCurrentUser();\n  },\n  // Get all users (for demo purposes)\n  getAllUsers: () => {\n    return [...users];\n  }\n};","map":{"version":3,"names":["v4","uuidv4","users","isBrowser","window","getStorageKey","key","savedUsers","localStorage","getItem","JSON","parse","e","console","error","saveUsers","setItem","stringify","authService","register","username","email","password","Promise","resolve","reject","some","user","Error","newUser","id","createdAt","Date","push","sessionStorage","login","find","u","logout","removeItem","getCurrentUser","userJson","isAuthenticated","getAllUsers"],"sources":["C:/Users/Administrator/Downloads/personal-budget-tracker/src/services/authService.ts"],"sourcesContent":["import { v4 as uuidv4 } from 'uuid';\r\n\r\nexport interface User {\r\n  id: string;\r\n  username: string;\r\n  email: string;\r\n  createdAt: Date;\r\n}\r\n\r\nexport interface AuthState {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  loading: boolean;\r\n}\r\n\r\n// In-memory storage for demo purposes\r\n// In a real app, this would be replaced with a database\r\nlet users: User[] = [];\r\n\r\n// Check if we're in a browser environment\r\nconst isBrowser = typeof window !== 'undefined';\r\n\r\n// Get storage key with a prefix to avoid conflicts\r\nconst getStorageKey = (key: string) => {\r\n  return `personal-budget-tracker-${key}`;\r\n};\r\n\r\n// Initialize users from localStorage if available\r\nif (isBrowser) {\r\n  const savedUsers = localStorage.getItem(getStorageKey('users'));\r\n  if (savedUsers) {\r\n    try {\r\n      users = JSON.parse(savedUsers);\r\n    } catch (e) {\r\n      console.error('Failed to parse saved users:', e);\r\n    }\r\n  }\r\n}\r\n\r\n// Save users to localStorage\r\nconst saveUsers = () => {\r\n  if (isBrowser) {\r\n    localStorage.setItem(getStorageKey('users'), JSON.stringify(users));\r\n  }\r\n};\r\n\r\nexport const authService = {\r\n  // Register a new user\r\n  register: (username: string, email: string, password: string): Promise<User> => {\r\n    return new Promise((resolve, reject) => {\r\n      // Check if user already exists\r\n      if (users.some(user => user.email === email)) {\r\n        reject(new Error('User with this email already exists'));\r\n        return;\r\n      }\r\n\r\n      // Create new user\r\n      const newUser: User = {\r\n        id: uuidv4(),\r\n        username,\r\n        email,\r\n        createdAt: new Date()\r\n      };\r\n\r\n      // Add to users array\r\n      users.push(newUser);\r\n      saveUsers();\r\n\r\n      // Store user in session storage for current session\r\n      if (isBrowser) {\r\n        sessionStorage.setItem(getStorageKey('currentUser'), JSON.stringify(newUser));\r\n      }\r\n\r\n      resolve(newUser);\r\n    });\r\n  },\r\n\r\n  // Login a user\r\n  login: (email: string, password: string): Promise<User> => {\r\n    return new Promise((resolve, reject) => {\r\n      // Find user by email\r\n      const user = users.find(u => u.email === email);\r\n      \r\n      if (!user) {\r\n        reject(new Error('User not found'));\r\n        return;\r\n      }\r\n\r\n      // In a real app, we would verify the password here\r\n      // For this demo, we'll just check if the user exists\r\n\r\n      // Store user in session storage for current session\r\n      if (isBrowser) {\r\n        sessionStorage.setItem(getStorageKey('currentUser'), JSON.stringify(user));\r\n      }\r\n\r\n      resolve(user);\r\n    });\r\n  },\r\n\r\n  // Logout the current user\r\n  logout: (): Promise<void> => {\r\n    return new Promise((resolve) => {\r\n      if (isBrowser) {\r\n        sessionStorage.removeItem(getStorageKey('currentUser'));\r\n      }\r\n      resolve();\r\n    });\r\n  },\r\n\r\n  // Get the current user\r\n  getCurrentUser: (): User | null => {\r\n    if (!isBrowser) return null;\r\n    \r\n    const userJson = sessionStorage.getItem(getStorageKey('currentUser'));\r\n    if (!userJson) return null;\r\n    \r\n    try {\r\n      return JSON.parse(userJson);\r\n    } catch (e) {\r\n      console.error('Failed to parse current user:', e);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated: (): boolean => {\r\n    return !!authService.getCurrentUser();\r\n  },\r\n\r\n  // Get all users (for demo purposes)\r\n  getAllUsers: (): User[] => {\r\n    return [...users];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}